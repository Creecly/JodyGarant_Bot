import logging
import asyncio
import time
import random
import string
import json
import os
from datetime import datetime
from typing import Dict, List, Optional
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    if not os.path.exists("logs"):
        os.makedirs("logs")

    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler("logs/bot.log", encoding='utf-8')
        ]
    )
    return logging.getLogger(__name__)

logger = setup_logging()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8052721063:AAF8uHHBfUzYBnouDlkXSzH_aHUrUw_JITE"
ADMIN_ID = 7586266147
CRYPTOBOT_API_TOKEN = "416434:AAPcOb0l1KnPuqxSCjFaW5gyob1MBUX8fKh"
CRYPTOBOT_API_URL = "https://pay.crypt.bot/api/"
DB_FILE = "users_db.json"
MIN_DEPOSIT = 1.0
MIN_WITHDRAW = 5.0

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö JSON
class JSONDatabase:
    def __init__(self, file_path: str = DB_FILE):
        self.file_path = file_path
        self.data = self._load_data()
        logger.info("Database initialized")

    def _load_data(self) -> Dict:
        try:
            if not os.path.exists(self.file_path):
                base_structure = {
                    "users": {},
                    "transactions": {},
                    "deals": {},
                    "invoices": {},
                    "system": {"last_ids": {}}
                }
                with open(self.file_path, 'w', encoding='utf-8') as f:
                    json.dump(base_structure, f, indent=4, ensure_ascii=False)
                return base_structure

            with open(self.file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"Error loading database: {e}")
            raise

    def save(self):
        try:
            with open(self.file_path, 'w', encoding='utf-8') as f:
                json.dump(self.data, f, indent=4, ensure_ascii=False)
        except Exception as e:
            logger.error(f"Error saving database: {e}")

    def user_exists(self, user_id: int) -> bool:
        return str(user_id) in self.data["users"]

    def get_user(self, user_id: int) -> Optional[Dict]:
        user = self.data["users"].get(str(user_id))
        if user:
            user["id"] = int(user_id)
        return user

    def add_user(self, user_id: int, username: str):
        if not self.user_exists(user_id):
            self.data["users"][str(user_id)] = {
                "username": username.lower() if username else str(user_id),
                "display_name": username or f"User_{user_id}",
                "balance": 0.0,
                "banned": False,
                "ban_info": None,
                "transactions": [],
                "deals": [],
                "registered_at": datetime.now().isoformat(),
                "last_active": datetime.now().isoformat()
            }
            self.save()
            logger.info(f"New user added: {user_id}")

    def update_balance(self, user_id: int, amount: float):
        if self.user_exists(user_id):
            self.data["users"][str(user_id)]["balance"] = round(
                self.data["users"][str(user_id)]["balance"] + amount, 2
            )
            self.data["users"][str(user_id)]["last_active"] = datetime.now().isoformat()
            self.save()
            logger.info(f"Updated balance for {user_id}: {amount} USDT")

    def ban_user(self, user_id: int, admin_id: int, reason: str = "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"):
        if self.user_exists(user_id):
            self.data["users"][str(user_id)]["banned"] = True
            self.data["users"][str(user_id)]["ban_info"] = {
                "by": admin_id,
                "at": datetime.now().isoformat(),
                "reason": reason
            }
            self.save()
            logger.info(f"User {user_id} banned by {admin_id}. Reason: {reason}")

    def unban_user(self, user_id: int):
        if self.user_exists(user_id):
            self.data["users"][str(user_id)]["banned"] = False
            self.data["users"][str(user_id)]["ban_info"] = None
            self.save()
            logger.info(f"User {user_id} unbanned")

    def search_user(self, query: str) -> Optional[Dict]:
        query = query.lower().strip('@')
        for user_id, user in self.data["users"].items():
            if (query in user["username"] or
                    query in user["display_name"].lower() or
                    query == user_id):
                return {"id": int(user_id), **user}
        return None

    def generate_id(self, prefix: str = "TX") -> str:
        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
        random_str = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
        return f"{prefix}{timestamp}-{random_str}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
db = JSONDatabase()
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    support_message = State()
    search_user = State()
    deal_amount = State()
    deal_description = State()
    confirm_deal = State()
    deposit_amount = State()
    withdraw_network = State()
    withdraw_amount = State()
    withdraw_address = State()
    dispute = State()
    admin_ban_user = State()
    admin_add_balance = State()
    admin_unban_user = State()
    deal_confirmation = State()

# –£—Ç–∏–ª–∏—Ç—ã
async def show_main_menu(message: types.Message):
    builder = ReplyKeyboardBuilder()
    buttons = ["üí∞ –ë–∞–ª–∞–Ω—Å", "üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "‚ÑπÔ∏è –ü–æ–º–æ—â—å", "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]
    for btn in buttons:
        builder.add(types.KeyboardButton(text=btn))
    builder.adjust(2, 2)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    logger.info(f"Showed main menu to {message.from_user.id}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(CommandStart())
async def start(message: types.Message):
    user = message.from_user
    db.add_user(user.id, user.username or user.first_name)

    if db.get_user(user.id)["banned"]:
        logger.warning(f"Banned user tried to access: {user.id}")
        return await message.answer("‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")

    welcome_text = (
        "ü§ù <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ì–∞—Ä–∞–Ω—Ç-–ë–æ—Ç!</b>\n\n"
        "–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ Telegram.\n\n"
        "‚úÖ <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n"
        "1. –ù–∞–π–¥–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫\n"
        "2. –°–æ–∑–¥–∞–π—Ç–µ —Å–¥–µ–ª–∫—É —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π\n"
        "3. –°—Ä–µ–¥—Å—Ç–≤–∞ –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è –Ω–∞ —Å—á–µ—Ç–µ\n"
        "4. –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π - –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–æ–¥–∞–≤—Ü—É\n\n"
        "<i>–ë–µ–∑ —Ä–∏—Å–∫–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞!</i>"
    )
    await message.answer(welcome_text)
    await show_main_menu(message)
    logger.info(f"New session started for {user.id}")

@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_command(message: types.Message):
    help_text = (
        "üõ† <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É-–≥–∞—Ä–∞–Ω—Ç—É</b>\n\n"
        "üîπ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "üíº <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ —Å–¥–µ–ª–∫–∞–º–∏:</b>\n"
        "1. –ù–∞–π–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫\n"
        "2. –°–æ–∑–¥–∞–π—Ç–µ —Å–¥–µ–ª–∫—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —É—Å–ª–æ–≤–∏–π\n"
        "3. –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ\n\n"
        "‚öñÔ∏è <b>–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:</b>\n"
        "–û—Ç–∫—Ä–æ–π—Ç–µ —Å–ø–æ—Ä –∫–æ–º–∞–Ω–¥–æ–π <code>/dispute_XXXXXX</code>\n\n"
        "üí≥ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º:</b>\n"
        f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {MIN_DEPOSIT} USDT\n"
        f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥: {MIN_WITHDRAW} USDT\n\n"
        "üìå –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
    )
    await message.answer(help_text)
    logger.info(f"Help requested by {message.from_user.id}")

@dp.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message, state: FSMContext):
    user = db.get_user(message.from_user.id)
    if user["banned"]:
        return await message.answer("‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

    await message.answer(
        "‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É:\n\n"
        "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )
    await state.set_state(Form.support_message)
    logger.info(f"Support requested by {message.from_user.id}")

@dp.message(Form.support_message)
async def process_support(message: types.Message, state: FSMContext):
    user = db.get_user(message.from_user.id)
    support_text = message.text

    await bot.send_message(
        ADMIN_ID,
        f"üì© <b>–ù–û–í–û–ï –û–ë–†–ê–©–ï–ù–ò–ï –í –ü–û–î–î–ï–†–ñ–ö–£</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user['username']}\n"
        f"üÜî ID: {message.from_user.id}\n\n"
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n<code>{support_text}</code>\n\n"
        f"–û—Ç–≤–µ—Ç–∏—Ç—å: <a href='tg://user?id={message.from_user.id}'>–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</a>"
    )

    await message.answer(
        "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n"
        "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )
    await state.clear()
    logger.info(f"Support message from {message.from_user.id} forwarded to admin")


# =============================================
# –ë–ê–õ–ê–ù–° –ò –ü–õ–ê–¢–ï–ñ–ò
# =============================================

@dp.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def balance_menu(message: types.Message):
    user = db.get_user(message.from_user.id)
    if user["banned"]:
        return await message.answer("‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"),
        types.InlineKeyboardButton(text="üì§ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw"),
        types.InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data="history"),
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )
    builder.adjust(2, 1, 1)

    await message.answer(
        f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {user['balance']:.2f} USDT\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup()
    )
    logger.info(f"Balance menu shown to {message.from_user.id}")


@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    await callback.message.delete()
    await show_main_menu(callback.message)
    await callback.answer()


@dp.callback_query(F.data == "history")
async def show_history(callback: types.CallbackQuery):
    user = db.get_user(callback.from_user.id)
    if user["banned"]:
        return await callback.answer("‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)

    transactions = user.get("transactions", [])[:10]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π
    if not transactions:
        return await callback.answer("üì≠ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞", show_alert=True)

    history_text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n\n"
    for tx_id in transactions:
        tx = db.data["transactions"].get(tx_id)
        if tx:
            date = datetime.fromisoformat(tx.get("created_at")).strftime("%d.%m.%Y %H:%M")
            amount = tx["amount"]
            type_ = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" if amount > 0 else "–í—ã–≤–æ–¥"
            status = tx.get("status", "completed")
            history_text += (
                f"‚ñ´Ô∏è <b>{type_}</b>\n"
                f"–°—É–º–º–∞: <code>{abs(amount):.2f} USDT</code>\n"
                f"–î–∞—Ç–∞: <code>{date}</code>\n"
                f"–°—Ç–∞—Ç—É—Å: <code>{status}</code>\n"
                f"ID: <code>{tx_id}</code>\n\n"
            )

    await callback.message.edit_text(
        history_text,
        reply_markup=InlineKeyboardBuilder()
        .add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="balance_back"))
        .as_markup()
    )
    await callback.answer()


@dp.callback_query(F.data == "balance_back")
async def balance_back(callback: types.CallbackQuery):
    await balance_menu(callback.message)
    await callback.answer()


# =============================================
# –ü–û–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê
# =============================================

@dp.callback_query(F.data == "deposit")
async def deposit_start(callback: types.CallbackQuery, state: FSMContext):
    if db.get_user(callback.from_user.id)["banned"]:
        return await callback.answer("‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)

    await callback.message.answer(
        f"üí≥ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ USDT</b>\n"
        f"(–ú–∏–Ω–∏–º—É–º: {MIN_DEPOSIT} USDT, –º–∞–∫—Å–∏–º—É–º: 10000 USDT):",
        parse_mode="HTML"
    )
    await state.set_state(Form.deposit_amount)
    await callback.answer()


@dp.message(Form.deposit_amount)
async def process_deposit(message: types.Message, state: FSMContext):
    user = db.get_user(message.from_user.id)
    if user["banned"]:
        return await message.answer("‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

    try:
        amount = float(message.text.strip().replace(",", "."))
        if amount < MIN_DEPOSIT:
            return await message.answer(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ {MIN_DEPOSIT} USDT")
        if amount > 10000:
            return await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ 10000 USDT")
    except ValueError:
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50 –∏–ª–∏ 100.50)")

    # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ CryptoBot
    invoice = create_cryptobot_invoice(amount, message.from_user.id)
    if not invoice:
        return await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

    tx_id = db.generate_id("DEP")
    db.data["transactions"][tx_id] = {
        "user_id": message.from_user.id,
        "amount": amount,
        "status": "pending",
        "invoice_id": invoice["invoice_id"],
        "created_at": datetime.now().isoformat(),
        "type": "deposit",
        "pay_url": invoice["pay_url"]
    }
    db.data["invoices"][invoice["invoice_id"]] = tx_id
    db.save()

    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
        callback_data=f"check_deposit:{tx_id}"
    ))
    builder.add(types.InlineKeyboardButton(
        text="üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É",
        url=invoice["pay_url"]
    ))

    await message.answer(
        f"üí≥ <b>–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É {amount:.2f} USDT</b>\n\n"
        f"üÜî <code>{tx_id}</code>\n"
        f"‚è≥ –°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 15 –º–∏–Ω—É—Ç\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É</b>",
        reply_markup=builder.as_markup(),
        disable_web_page_preview=True
    )
    await state.clear()
    logger.info(f"Deposit invoice created for {message.from_user.id}: {amount} USDT")


def create_cryptobot_invoice(amount: float, user_id: int):
    headers = {
        "Crypto-Pay-API-Token": CRYPTOBOT_API_TOKEN,
        "Content-Type": "application/json"
    }
    payload = {
        "asset": "USDT",
        "amount": str(amount),
        "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {user_id}",
        "hidden_message": "–û–ø–ª–∞—Ç–∞ –≥–∞—Ä–∞–Ω—Ç-–±–æ—Ç–∞",
        "paid_btn_name": "viewItem",
        "paid_btn_url": f"https://t.me/{BOT_TOKEN.split(':')[0]}",
        "payload": json.dumps({"user_id": user_id}),
        "allow_anonymous": False
    }
    try:
        response = requests.post(
            f"{CRYPTOBOT_API_URL}createInvoice",
            headers=headers,
            json=payload,
            timeout=10
        )
        if response.status_code == 200:
            result = response.json().get("result")
            if result and "pay_url" in result:
                return result
        logger.error(f"CryptoPay API error: {response.text}")
    except Exception as e:
        logger.error(f"CryptoPay connection error: {e}")
    return None


@dp.callback_query(F.data.startswith("check_deposit:"))
async def check_deposit_payment(callback: types.CallbackQuery):
    tx_id = callback.data.split(":")[1]
    tx = db.data["transactions"].get(tx_id)

    if not tx or tx["status"] != "pending":
        return await callback.answer("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")

    status = check_invoice_status(tx["invoice_id"])
    if status == "paid":
        db.update_balance(tx["user_id"], tx["amount"])
        db.data["transactions"][tx_id]["status"] = "completed"
        db.data["transactions"][tx_id]["completed_at"] = datetime.now().isoformat()
        db.data["users"][str(tx["user_id"])]["transactions"].append(tx_id)
        db.save()

        await callback.message.edit_text(
            f"‚úÖ <b>–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {tx['amount']:.2f} USDT!</b>\n\n"
            f"üÜî <code>{tx_id}</code>\n"
            f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <code>{db.get_user(tx['user_id'])['balance']:.2f} USDT</code>"
        )
        logger.info(f"Deposit confirmed for {tx['user_id']}: {tx['amount']} USDT")
    elif status == "active":
        await callback.answer("‚åõ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω", show_alert=True)
    else:
        await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫", show_alert=True)


def check_invoice_status(invoice_id: int) -> Optional[str]:
    try:
        response = requests.get(
            f"{CRYPTOBOT_API_URL}getInvoices?invoice_ids={invoice_id}",
            headers={"Crypto-Pay-API-Token": CRYPTOBOT_API_TOKEN},
            timeout=10
        )
        if response.status_code == 200:
            data = response.json()
            return data.get("result", {}).get("items", [{}])[0].get("status")
        logger.error(f"CryptoPay check error: {response.text}")
    except Exception as e:
        logger.error(f"CryptoPay connection error: {e}")
    return None


# =============================================
# –í–´–í–û–î –°–†–ï–î–°–¢–í
# =============================================

@dp.callback_query(F.data == "withdraw")
async def withdraw_start(callback: types.CallbackQuery, state: FSMContext):
    user = db.get_user(callback.from_user.id)
    if user["banned"]:
        return await callback.answer("‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)

    if user["balance"] < MIN_WITHDRAW:
        return await callback.answer(
            f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ {MIN_WITHDRAW} USDT",
            show_alert=True
        )

    builder = InlineKeyboardBuilder()
    networks = ["TRC20", "ERC20", "BSC"]
    for net in networks:
        builder.add(types.InlineKeyboardButton(
            text=net,
            callback_data=f"withdraw_net:{net}"
        ))
    builder.adjust(3)

    await callback.message.edit_text(
        "üåê <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –≤—ã–≤–æ–¥–∞:</b>\n\n"
        "‚ö†Ô∏è <i>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Å–µ—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç USDT</i>",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@dp.callback_query(F.data.startswith("withdraw_net:"))
async def select_withdraw_network(callback: types.CallbackQuery, state: FSMContext):
    network = callback.data.split(":")[1]
    await state.update_data(network=network)
    user = db.get_user(callback.from_user.id)

    await callback.message.answer(
        f"üåê <b>–í—ã–±—Ä–∞–Ω–∞ —Å–µ—Ç—å:</b> {network}\n"
        f"üí∞ <b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> {user['balance']:.2f} USDT\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–º–∏–Ω. {MIN_WITHDRAW} USDT):"
    )
    await state.set_state(Form.withdraw_amount)
    await callback.answer()


@dp.message(Form.withdraw_amount)
async def process_withdraw_amount(message: types.Message, state: FSMContext):
    user = db.get_user(message.from_user.id)
    if user["banned"]:
        return await message.answer("‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

    try:
        amount = float(message.text.strip().replace(",", "."))
        if amount < MIN_WITHDRAW:
            return await message.answer(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ {MIN_WITHDRAW} USDT")
        if amount > user["balance"]:
            return await message.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {user['balance']:.2f} USDT"
            )
    except ValueError:
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50 –∏–ª–∏ 100.50)")

    await state.update_data(amount=amount)
    await message.answer(
        "üì≠ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤:\n\n"
        "‚ö†Ô∏è <i>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞! –û—à–∏–±–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä–µ —Å—Ä–µ–¥—Å—Ç–≤.</i>"
    )
    await state.set_state(Form.withdraw_address)


@dp.message(Form.withdraw_address)
async def process_withdraw_address(message: types.Message, state: FSMContext):
    user = db.get_user(message.from_user.id)
    if user["banned"]:
        return await message.answer("‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

    address = message.text.strip()
    data = await state.get_data()
    amount = data["amount"]
    network = data["network"]

    # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
    if network in ["TRC20", "ERC20"] and not (address.startswith("0x") and len(address) == 42):
        return await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞. –î–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 0x –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 42 —Å–∏–º–≤–æ–ª–∞"
        )

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥
    tx_id = db.generate_id("WTH")
    db.data["transactions"][tx_id] = {
        "user_id": message.from_user.id,
        "amount": -amount,
        "address": address,
        "network": network,
        "status": "pending",
        "created_at": datetime.now().isoformat(),
        "type": "withdraw"
    }
    db.update_balance(message.from_user.id, -amount)
    db.save()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await bot.send_message(
        ADMIN_ID,
        f"üÜò <b>–ù–û–í–´–ô –ó–ê–ü–†–û–° –ù–ê –í–´–í–û–î</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user['username']}\n"
        f"üÜî ID: {message.from_user.id}\n"
        f"üíµ –°—É–º–º–∞: {amount:.2f} USDT\n"
        f"üåê –°–µ—Ç—å: {network}\n"
        f"üì≠ –ê–¥—Ä–µ—Å: <code>{address}</code>\n\n"
        f"üÜî ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: <code>{tx_id}</code>\n\n"
        f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: /approve_{tx_id}\n"
        f"–î–ª—è –æ—Ç–º–µ–Ω—ã: /reject_{tx_id}"
    )

    await message.answer(
        "‚úÖ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
        "–û–±—ã—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤.\n"
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ.\n\n"
        f"üÜî <code>{tx_id}</code>"
    )
    await state.clear()
    logger.info(f"Withdraw request from {message.from_user.id}: {amount} USDT to {address}")


@dp.message(F.text.startswith("/approve_"))
async def approve_withdraw(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

    tx_id = message.text.split("_")[1].strip()
    tx = db.data["transactions"].get(tx_id)

    if not tx or tx["status"] != "pending":
        return await message.answer("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")

    tx["status"] = "completed"
    tx["approved_by"] = message.from_user.id
    tx["approved_at"] = datetime.now().isoformat()
    db.save()

    await message.answer(f"‚úÖ –í—ã–≤–æ–¥ {tx_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")
    await bot.send_message(
        tx["user_id"],
        f"‚úÖ –í–∞—à –≤—ã–≤–æ–¥ –Ω–∞ —Å—É–º–º—É {abs(tx['amount'])} USDT –≤—ã–ø–æ–ª–Ω–µ–Ω\n"
        f"üåê –°–µ—Ç—å: {tx['network']}\n"
        f"üì≠ –ê–¥—Ä–µ—Å: {tx['address']}\n"
        f"üÜî –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {tx_id}"
    )


@dp.message(F.text.startswith("/reject_"))
async def reject_withdraw(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

    tx_id = message.text.split("_")[1].strip()
    tx = db.data["transactions"].get(tx_id)

    if not tx or tx["status"] != "pending":
        return await message.answer("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å
    db.update_balance(tx["user_id"], abs(tx["amount"]))
    tx["status"] = "rejected"
    tx["rejected_by"] = message.from_user.id
    tx["rejected_at"] = datetime.now().isoformat()
    db.save()

    await message.answer(f"‚ùå –í—ã–≤–æ–¥ {tx_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω")
    await bot.send_message(
        tx["user_id"],
        f"‚ùå –í–∞—à –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω—ë–Ω. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å\n"
        f"üÜî –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {tx_id}\n"
        f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {db.get_user(tx['user_id'])['balance']} USDT"
    )


# =============================================
# –°–î–ï–õ–ö–ò –ò –ì–ê–†–ê–ù–¢–ò–ò
# =============================================

@dp.message(F.text == "üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def search_user(message: types.Message, state: FSMContext):
    user = db.get_user(message.from_user.id)
    if user["banned"]:
        return await message.answer("‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

    await message.answer(
        "üîç <b>–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä—ã:\n"
        "@username\n"
        "123456789</i>",
        parse_mode="HTML"
    )
    await state.set_state(Form.search_user)
    logger.info(f"User search initiated by {message.from_user.id}")


@dp.message(Form.search_user)
async def process_search(message: types.Message, state: FSMContext):
    query = message.text.strip()
    found_user = db.search_user(query)

    if not found_user:
        return await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )

    if found_user["banned"]:
        return await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")

    if found_user["id"] == message.from_user.id:
        return await message.answer("‚ùå –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É —Å —Å–∞–º–∏–º —Å–æ–±–æ–π")

    await state.update_data(
        target_user_id=found_user["id"],
        target_username=found_user["display_name"]
    )

    await message.answer(
        f"‚úÖ <b>–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {found_user['display_name']}\n"
        f"üÜî ID: <code>{found_user['id']}</code>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ –≤ USDT:",
        parse_mode="HTML"
    )
    await state.set_state(Form.deal_amount)
    logger.info(f"User found: {found_user['id']} for {message.from_user.id}")


@dp.message(Form.deal_amount)
async def process_deal_amount(message: types.Message, state: FSMContext):
    user = db.get_user(message.from_user.id)
    if user["banned"]:
        return await message.answer("‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

    try:
        amount = float(message.text.strip().replace(",", "."))
        if amount <= 0:
            return await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        if amount > user["balance"]:
            return await message.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']:.2f} USDT\n\n"
                f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à—É—é —Å—É–º–º—É."
            )
    except ValueError:
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50 –∏–ª–∏ 100.50)")

    await state.update_data(deal_amount=amount)
    await message.answer(
        "üìù <b>–û–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏:</b>\n\n"
        "‚Ä¢ –ß—Ç–æ –æ–±–º–µ–Ω–∏–≤–∞–µ—Ç–µ\n"
        "‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Å—Ç–æ—Ä–æ–Ω\n"
        "‚Ä¢ –°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n"
        "‚Ä¢ –î—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è\n\n"
        "<i>–ú–∏–Ω–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤</i>",
        parse_mode="HTML"
    )
    await state.set_state(Form.deal_description)


@dp.message(Form.deal_description)
async def process_deal_description(message: types.Message, state: FSMContext):
    user = db.get_user(message.from_user.id)
    if user["banned"]:
        return await message.answer("‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

    description = message.text.strip()
    if len(description) < 30:
        return await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–º (–º–∏–Ω–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤)")

    data = await state.get_data()
    deal_id = db.generate_id("DL")

    db.data["deals"][deal_id] = {
        "from_user_id": message.from_user.id,
        "from_username": user["display_name"],
        "to_user_id": data["target_user_id"],
        "to_username": data["target_username"],
        "amount": data["deal_amount"],
        "description": description,
        "status": "pending",
        "created_at": datetime.now().isoformat(),
        "from_confirmed": False,
        "to_confirmed": False,
        "messages": []
    }
    db.save()

    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"deal_confirm:{deal_id}"),
        types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"deal_cancel:{deal_id}")
    )

    await message.answer(
        f"üìÑ <b>–°–¥–µ–ª–∫–∞ #{deal_id}</b>\n\n"
        f"üë§ <b>–ö–æ–º—É:</b> {data['target_username']}\n"
        f"üí∞ <b>–°—É–º–º–∞:</b> {data['deal_amount']:.2f} USDT\n\n"
        f"üìù <b>–£—Å–ª–æ–≤–∏—è:</b>\n{description}\n\n"
        "<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏:</b>",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await state.set_state(Form.confirm_deal)
    logger.info(f"Deal {deal_id} created by {message.from_user.id}")


@dp.callback_query(F.data.startswith("deal_confirm:"))
async def confirm_deal(callback: types.CallbackQuery, state: FSMContext):
    deal_id = callback.data.split(":")[1]
    deal = db.data["deals"].get(deal_id)

    if not deal or deal["status"] != "pending":
        await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞", show_alert=True)
        return

    user = db.get_user(callback.from_user.id)
    if user["banned"]:
        await callback.answer("‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
        return

    # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    db.update_balance(deal["from_user_id"], -deal["amount"])
    deal["status"] = "active"
    db.data["users"][str(deal["from_user_id"])]["deals"].append(deal_id)
    db.save()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É
    try:
        await callback.message.edit_text("‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã.")
        await bot.send_message(
            deal["from_user_id"],
            f"üìå <b>–°–¥–µ–ª–∫–∞ #{deal_id} —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"üë§ <b>–î–ª—è:</b> {deal['to_username']}\n"
            f"üí∞ <b>–°—É–º–º–∞:</b> {deal['amount']:.2f} USDT\n\n"
            f"üìù <b>–£—Å–ª–æ–≤–∏—è:</b>\n{deal['description']}\n\n"
            "<i>–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π:</i>\n"
            f"<code>/confirm_deal_{deal_id}</code>",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error sending deal notification: {e}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    try:
        await bot.send_message(
            deal["to_user_id"],
            f"üîî <b>–í–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ –Ω–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ #{deal_id}</b>\n\n"
            f"üë§ <b>–û—Ç:</b> {deal['from_username']}\n"
            f"üí∞ <b>–°—É–º–º–∞:</b> {deal['amount']:.2f} USDT\n\n"
            f"üìù <b>–£—Å–ª–æ–≤–∏—è:</b>\n{deal['description']}\n\n"
            "<i>–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π:</i>\n"
            f"<code>/confirm_deal_{deal_id}</code>\n\n"
            "<i>–ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –æ—Ç–∫—Ä–æ–π—Ç–µ —Å–ø–æ—Ä:</i>\n"
            f"<code>/dispute_{deal_id}</code>",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error sending deal notification to target: {e}")

    await callback.answer()
    await state.clear()
    logger.info(f"Deal {deal_id} confirmed by {callback.from_user.id}")


@dp.message(F.text.startswith("/confirm_deal_"))
async def confirm_deal_completion(message: types.Message):
    user = db.get_user(message.from_user.id)
    if user["banned"]:
        return await message.answer("‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

    try:
        deal_id = message.text.split("_")[-1].strip()
        deal = db.data["deals"].get(deal_id)

        if not deal or deal["status"] != "active":
            return await message.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        if message.from_user.id == deal["from_user_id"]:
            deal["from_confirmed"] = True
        elif message.from_user.id == deal["to_user_id"]:
            deal["to_confirmed"] = True
        else:
            return await message.answer("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏")

        db.save()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ª–∏ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
        if deal["from_confirmed"] and deal["to_confirmed"]:
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
            db.update_balance(deal["to_user_id"], deal["amount"])
            deal["status"] = "completed"
            deal["completed_at"] = datetime.now().isoformat()
            db.save()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            await message.answer(
                f"‚úÖ <b>–°–¥–µ–ª–∫–∞ #{deal_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                f"üí∞ –°—É–º–º–∞: {deal['amount']:.2f} USDT –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—é."
            )

            other_user_id = deal["to_user_id"] if message.from_user.id == deal["from_user_id"] else deal["from_user_id"]
            try:
                await bot.send_message(
                    other_user_id,
                    f"‚úÖ <b>–°–¥–µ–ª–∫–∞ #{deal_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                    f"üí∞ –°—É–º–º–∞: {deal['amount']:.2f} USDT –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—é.\n"
                    f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {db.get_user(other_user_id)['balance']:.2f} USDT"
                )
            except Exception as e:
                logger.error(f"Error notifying user {other_user_id}: {e}")
        else:
            await message.answer(
                "‚úÖ –í–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–π —Å—Ç–æ—Ä–æ–Ω—ã."
            )

    except Exception as e:
        logger.error(f"Deal confirmation error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏")


@dp.message(F.text.startswith("/dispute_"))
async def open_dispute(message: types.Message):
    user = db.get_user(message.from_user.id)
    if user["banned"]:
        return await message.answer("‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

    try:
        deal_id = message.text.split("_")[1].strip()
        deal = db.data["deals"].get(deal_id)

        if not deal:
            return await message.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        if message.from_user.id not in [deal["from_user_id"], deal["to_user_id"]]:
            return await message.answer("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏")

        deal["status"] = "dispute"
        db.save()

        await bot.send_message(
            ADMIN_ID,
            f"‚öñÔ∏è <b>–°–ü–û–† –ü–û –°–î–ï–õ–ö–ï #{deal_id}</b>\n\n"
            f"üë§ –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: {deal['from_username']} (ID: {deal['from_user_id']})\n"
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {deal['to_username']} (ID: {deal['to_user_id']})\n"
            f"üí∞ –°—É–º–º–∞: {deal['amount']:.2f} USDT\n\n"
            f"üìù –£—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏:\n{deal['description']}\n\n"
            f"üë§ –û—Ç–∫—Ä—ã–ª —Å–ø–æ—Ä: @{user['username']} (ID: {message.from_user.id})\n\n"
            f"<b>–î–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–ø–æ—Ä–∞:</b>\n"
            f"/resolve_{deal_id} [ID_–ø–æ–±–µ–¥–∏—Ç–µ–ª—è] [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]\n\n"
            f"–ü—Ä–∏–º–µ—Ä:\n"
            f"/resolve_{deal_id} {deal['from_user_id']} –£—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"
        )

        await message.answer(
            "‚öñÔ∏è <b>–°–ø–æ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç!</b>\n\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à —Å–ø–æ—Ä –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—à–µ–Ω–∏–∏."
        )

    except Exception as e:
        logger.error(f"Dispute error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /dispute_ID_—Å–¥–µ–ª–∫–∏")


@dp.message(F.text.startswith("/resolve_"))
async def resolve_dispute(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

    try:
        parts = message.text.split()
        deal_id = parts[0].split("_")[1]
        winner_id = int(parts[1])
        comment = " ".join(parts[2:]) if len(parts) > 2 else "–†–µ—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"

        deal = db.data["deals"].get(deal_id)
        if not deal or deal["status"] != "dispute":
            return await message.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ 'dispute'")

        if winner_id not in [deal["from_user_id"], deal["to_user_id"]]:
            return await message.answer("‚ùå –£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–±–µ–¥–∏—Ç–µ–ª—è")

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
        db.update_balance(winner_id, deal["amount"])
        deal["status"] = "resolved"
        deal["resolution"] = {
            "by": message.from_user.id,
            "at": datetime.now().isoformat(),
            "winner": winner_id,
            "comment": comment
        }
        db.save()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        for user_id in [deal["from_user_id"], deal["to_user_id"]]:
            try:
                await bot.send_message(
                    user_id,
                    f"‚öñÔ∏è <b>–°–ø–æ—Ä –ø–æ —Å–¥–µ–ª–∫–µ #{deal_id} —Ä–∞–∑—Ä–µ—à—ë–Ω</b>\n\n"
                    f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {'–í—ã' if user_id == winner_id else f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {winner_id}'}\n"
                    f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
                    f"üí∞ –°—É–º–º–∞: {deal['amount']:.2f} USDT\n\n"
                    f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {db.get_user(user_id)['balance']:.2f} USDT"
                )
            except Exception as e:
                logger.error(f"Can't notify user {user_id}: {e}")

        await message.answer(
            "‚úÖ <b>–°–ø–æ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑—Ä–µ—à—ë–Ω</b>\n\n"
            f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_id}\n"
            f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
        )

    except Exception as e:
        logger.error(f"Resolve dispute error: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞. –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
            "/resolve_ID_—Å–¥–µ–ª–∫–∏ ID_–ø–æ–±–µ–¥–∏—Ç–µ–ª—è [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            f"/resolve_{deal_id} {deal['from_user_id']} –£—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"
        )


# =============================================
# –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨
# =============================================

@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        logger.warning(f"Unauthorized admin access attempt: {message.from_user.id}")
        return await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="üî® –ó–∞–±–∞–Ω–∏—Ç—å", callback_data="admin:ban"),
        types.InlineKeyboardButton(text="üîì –†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data="admin:unban"),
        types.InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin:balance"),
        types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats"),
        types.InlineKeyboardButton(text="üîÑ –í—ã–ø–ª–∞—Ç—ã", callback_data="admin:withdrawals"),
        types.InlineKeyboardButton(text="‚öñÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—ã", callback_data="admin:disputes")
    )
    builder.adjust(2, 2, 1, 1)

    await message.answer(
        "üõ† <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>",
        reply_markup=builder.as_markup()
    )
    logger.info(f"Admin panel accessed by {message.from_user.id}")


@dp.callback_query(F.data.startswith("admin:"))
async def admin_actions(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)

    action = callback.data.split(":")[1]

    if action == "ban":
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏—á–∏–Ω—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
            "<code>123456789 –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª</code>",
            parse_mode="HTML"
        )
        await state.set_state(Form.admin_ban_user)
    elif action == "unban":
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:\n"
            "<code>123456789</code>",
            parse_mode="HTML"
        )
        await state.set_state(Form.admin_unban_user)
    elif action == "balance":
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–¥–ª—è —Å–Ω—è—Ç–∏—è —É–∫–∞–∂–∏—Ç–µ –º–∏–Ω—É—Å):\n"
            "<code>123456789 100.50</code>\n"
            "<code>123456789 -50.00</code>",
            parse_mode="HTML"
        )
        await state.set_state(Form.admin_add_balance)
    elif action == "stats":
        stats = await get_system_stats()
        await callback.message.edit_text(stats, parse_mode="HTML")
    elif action == "withdrawals":
        withdrawals = await get_pending_withdrawals()
        await callback.message.edit_text(withdrawals, parse_mode="HTML")
    elif action == "disputes":
        disputes = await get_active_disputes()
        await callback.message.edit_text(disputes, parse_mode="HTML")

    await callback.answer()


@dp.message(Form.admin_ban_user)
async def process_ban_user(message: types.Message, state: FSMContext):
    try:
        parts = message.text.split()
        user_id = int(parts[0])
        reason = " ".join(parts[1:]) if len(parts) > 1 else "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"

        if not db.user_exists(user_id):
            return await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        db.ban_user(user_id, message.from_user.id, reason)

        try:
            await bot.send_message(
                user_id,
                f"‚õî <b>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                f"–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
        except Exception as e:
            logger.error(f"Can't notify banned user {user_id}: {e}")

        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
    except Exception as e:
        logger.error(f"Ban user error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –§–æ—Ä–º–∞—Ç: ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [–ø—Ä–∏—á–∏–Ω–∞]")
    finally:
        await state.clear()


@dp.message(Form.admin_unban_user)
async def process_unban_user(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text.strip())

        if not db.user_exists(user_id):
            return await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        db.unban_user(user_id)

        try:
            await bot.send_message(
                user_id,
                "‚úÖ <b>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."
            )
        except Exception as e:
            logger.error(f"Can't notify unbanned user {user_id}: {e}")

        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"Unban user error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    finally:
        await state.clear()


@dp.message(Form.admin_add_balance)
async def process_add_balance(message: types.Message, state: FSMContext):
    try:
        parts = message.text.split()
        user_id = int(parts[0])
        amount = float(parts[1])

        if not db.user_exists(user_id):
            return await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        db.update_balance(user_id, amount)
        user = db.get_user(user_id)

        try:
            await bot.send_message(
                user_id,
                f"‚ÑπÔ∏è <b>–í–∞—à –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n"
                f"üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {amount:.2f} USDT\n"
                f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user['balance']:.2f} USDT"
            )
        except Exception as e:
            logger.error(f"Can't notify user {user_id}: {e}")

        await message.answer(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω—ë–Ω\n"
            f"üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {amount:.2f} USDT\n"
            f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user['balance']:.2f} USDT"
        )
    except Exception as e:
        logger.error(f"Add balance error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –§–æ—Ä–º–∞—Ç: ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É–º–º–∞")
    finally:
        await state.clear()


async def get_system_stats() -> str:
    total_users = len(db.data["users"])
    active_users = len([u for u in db.data["users"].values() if not u["banned"]])
    total_balance = sum(u["balance"] for u in db.data["users"].values())
    total_deals = len(db.data["deals"])
    active_deals = len([d for d in db.data["deals"].values() if d["status"] == "active"])
    pending_withdrawals = len(
        [t for t in db.data["transactions"].values() if t["type"] == "withdraw" and t["status"] == "pending"])

    return (
        "üìä <b>–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b> {total_users} ({active_users} –∞–∫—Ç–∏–≤–Ω—ã—Ö)\n"
        f"üí∞ <b>–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {total_balance:.2f} USDT\n"
        f"ü§ù <b>–°–¥–µ–ª–∫–∏:</b> {total_deals} ({active_deals} –∞–∫—Ç–∏–≤–Ω—ã—Ö)\n"
        f"üîÑ <b>–û–∂–∏–¥–∞—é—Ç –≤—ã–ø–ª–∞—Ç—ã:</b> {pending_withdrawals}\n\n"
        f"üïí <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b>\n{datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )


async def get_pending_withdrawals() -> str:
    pending = [
                  t for t in db.data["transactions"].values()
                  if t["type"] == "withdraw" and t["status"] == "pending"
              ][:10]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10

    if not pending:
        return "‚è≥ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥"

    text = "üìã <b>–û–∂–∏–¥–∞—é—â–∏–µ –≤—ã–ø–ª–∞—Ç—ã:</b>\n\n"
    for tx in pending:
        user = db.get_user(tx["user_id"])
        text += (
            f"üë§ @{user['username']} (ID: {tx['user_id']})\n"
            f"üí∞ {abs(tx['amount']):.2f} USDT ({tx['network']})\n"
            f"üì≠ {tx['address']}\n"
            f"üÜî TX: <code>{tx['id']}</code>\n"
            f"‚è≥ {datetime.fromisoformat(tx['created_at']).strftime('%d.%m %H:%M')}\n\n"
            f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: /approve_{tx['id']}\n"
            f"–î–ª—è –æ—Ç–º–µ–Ω—ã: /reject_{tx['id']}\n\n"
        )
    return text


async def get_active_disputes() -> str:
    disputes = [
                   d for d in db.data["deals"].values()
                   if d["status"] == "dispute"
               ][:10]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10

    if not disputes:
        return "‚öñÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Ä–æ–≤"

    text = "‚öñÔ∏è <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—ã:</b>\n\n"
    for deal in disputes:
        text += (
            f"üÜî <code>{deal['id']}</code>\n"
            f"üë§ –û—Ç: {deal['from_username']} (ID: {deal['from_user_id']})\n"
            f"üë§ –ö–æ–º—É: {deal['to_username']} (ID: {deal['to_user_id']})\n"
            f"üí∞ –°—É–º–º–∞: {deal['amount']:.2f} USDT\n\n"
            f"–î–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:\n"
            f"/resolve_{deal['id']} [ID_–ø–æ–±–µ–¥–∏—Ç–µ–ª—è] [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]\n\n"
        )
    return text


# =============================================
# –ó–ê–í–ï–†–®–ê–Æ–©–ò–ï –§–£–ù–ö–¶–ò–ò
# =============================================

async def on_startup():
    logger.info("Bot starting...")
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    if not os.path.exists("logs"):
        os.makedirs("logs")


async def on_shutdown():
    logger.info("Bot shutting down...")
    await bot.session.close()


async def check_pending_payments():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
    while True:
        try:
            pending = [
                tx_id for tx_id, tx in db.data["transactions"].items()
                if tx["type"] == "deposit" and tx["status"] == "pending"
            ]

            for tx_id in pending:
                tx = db.data["transactions"][tx_id]
                status = check_invoice_status(tx["invoice_id"])

                if status == "paid":
                    db.update_balance(tx["user_id"], tx["amount"])
                    db.data["transactions"][tx_id]["status"] = "completed"
                    db.data["transactions"][tx_id]["completed_at"] = datetime.now().isoformat()
                    db.data["users"][str(tx["user_id"])]["transactions"].append(tx_id)
                    db.save()

                    try:
                        await bot.send_message(
                            tx["user_id"],
                            f"‚úÖ <b>–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
                            f"üí∞ –°—É–º–º–∞: {tx['amount']:.2f} USDT\n"
                            f"üÜî ID: <code>{tx_id}</code>\n"
                            f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {db.get_user(tx['user_id'])['balance']:.2f} USDT"
                        )
                    except Exception as e:
                        logger.error(f"Error sending payment confirmation: {e}")

                elif status == "expired":
                    db.data["transactions"][tx_id]["status"] = "expired"
                    db.save()

            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

        except Exception as e:
            logger.error(f"Error in payment check task: {e}")
            await asyncio.sleep(60)


async def main():
    await on_startup()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    asyncio.create_task(check_pending_payments())

    try:
        await dp.start_polling(bot)
    finally:
        await on_shutdown()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.critical(f"Fatal error: {e}", exc_info=True)
    finally:
        logger.info("Bot shutdown complete")